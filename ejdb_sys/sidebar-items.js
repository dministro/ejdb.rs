initSidebarItems({"constant":[["AIO_PRIO_DELTA_MAX",""],["ARG_MAX",""],["BC_BASE_MAX",""],["BC_DIM_MAX",""],["BC_SCALE_MAX",""],["BC_STRING_MAX",""],["BIG_ENDIAN",""],["BSON_ERROR",""],["BSON_MAX_FPATH_LEN",""],["BSON_OK",""],["BUFSIZ",""],["BYTE_ORDER",""],["CHARCLASS_NAME_MAX",""],["CLOCKS_PER_SEC",""],["CLOCK_BOOTTIME",""],["CLOCK_BOOTTIME_ALARM",""],["CLOCK_MONOTONIC",""],["CLOCK_MONOTONIC_COARSE",""],["CLOCK_MONOTONIC_RAW",""],["CLOCK_PROCESS_CPUTIME_ID",""],["CLOCK_REALTIME",""],["CLOCK_REALTIME_ALARM",""],["CLOCK_REALTIME_COARSE",""],["CLOCK_THREAD_CPUTIME_ID",""],["COLL_WEIGHTS_MAX",""],["DELAYTIMER_MAX",""],["DOMAIN",""],["EJDB_MAX_IMPORTED_BSON_SIZE",""],["EJDB_VERSION",""],["EJDB_VERSION_MAJOR",""],["EJDB_VERSION_MINOR",""],["EJDB_VERSION_PATCH",""],["EOF",""],["EXIT_FAILURE",""],["EXIT_SUCCESS",""],["EXPR_NEST_MAX",""],["FD_SETSIZE",""],["FILENAME_MAX",""],["FOPEN_MAX",""],["FP_ILOGB0",""],["FP_ILOGBNAN",""],["FP_INFINITE",""],["FP_NAN",""],["FP_NORMAL",""],["FP_SUBNORMAL",""],["FP_ZERO",""],["HOST_NAME_MAX",""],["INT16_MAX",""],["INT16_MIN",""],["INT32_MAX",""],["INT32_MIN",""],["INT8_MAX",""],["INT8_MIN",""],["INTPTR_MAX",""],["INTPTR_MIN",""],["INT_FAST16_MAX",""],["INT_FAST16_MIN",""],["INT_FAST32_MAX",""],["INT_FAST32_MIN",""],["INT_FAST8_MAX",""],["INT_FAST8_MIN",""],["INT_LEAST16_MAX",""],["INT_LEAST16_MIN",""],["INT_LEAST32_MAX",""],["INT_LEAST32_MIN",""],["INT_LEAST8_MAX",""],["INT_LEAST8_MIN",""],["INVALID_HANDLE_VALUE",""],["JBEEI","< EJDB export/import error"],["JBEEJSONPARSE","< JSON parsing failed"],["JBEFPATHINVALID","< Invalid field path value."],["JBEINVALIDBSON","< Invalid bson object."],["JBEINVALIDBSONPK","< Invalid bson object id."],["JBEINVALIDCMD","< Invalid ejdb command specified"],["JBEINVALIDCOLNAME","< Invalid collection name."],["JBEMAXNUMCOLS","< Exceeded the maximum number of collections per database"],["JBEMETANVALID","< Inconsistent database metadata."],["JBEQACTKEY","< action key in $do block can only be one of: $join, $slice"],["JBEQERROR","< Query generic error."],["JBEQINCEXCL","< $fields hint cannot mix include and exclude fields"],["JBEQINOPNOTARRAY","< $strand, $stror, $in, $nin, $bt keys requires not empty array value."],["JBEQINVALIDQCONTROL","< Invalid query control field starting with '$'."],["JBEQINVALIDQRX","< Invalid query regexp value."],["JBEQONEEMATCH","< Only one $elemMatch allowed in the fieldpath."],["JBEQRSSORTING","< Result set sorting error."],["JBEQUPDFAILED","< Updating failed."],["JBETOOBIGBSON","< BSON size is too big"],["JBIDXARR","< Array token index."],["JBIDXDROP","< Drop index."],["JBIDXDROPALL","< Drop index for all types."],["JBIDXISTR","< Case insensitive string index"],["JBIDXNUM","< Number index."],["JBIDXOP","< Optimize indexes."],["JBIDXREBLD","< Rebuild index."],["JBIDXSTR","< String index."],["JBIMPORTREPLACE",""],["JBIMPORTUPDATE",""],["JBJSONEXPORT",""],["JBMAXCOLNAMELEN",""],["JBOCREAT","< Create if db file not exists."],["JBOLCKNB","< Lock without blocking."],["JBONOLCK","< Open without locking."],["JBOREADER","< Open as a reader."],["JBOTRUNC","< Truncate db on open."],["JBOTSYNC","< Synchronize every transaction."],["JBOWRITER","< Open as a writer."],["JBQRYCOUNT",""],["JBQRYFINDONE",""],["JDBIDKEYNAME",""],["JDBIDKEYNAMEL",""],["LINE_MAX",""],["LINK_MAX",""],["LITTLE_ENDIAN",""],["LOGIN_NAME_MAX",""],["L_ctermid",""],["L_tmpnam",""],["MATH_ERREXCEPT",""],["MATH_ERRNO",""],["MAX_CANON",""],["MAX_INPUT",""],["MB_LEN_MAX",""],["MQ_PRIO_MAX",""],["M_1_PI",""],["M_2_PI",""],["M_2_SQRTPI",""],["M_E",""],["M_LN10",""],["M_LN2",""],["M_LOG10E",""],["M_LOG2E",""],["M_PI",""],["M_PI_2",""],["M_PI_4",""],["M_SQRT1_2",""],["M_SQRT2",""],["NAME_MAX",""],["NGROUPS_MAX",""],["NR_OPEN",""],["OVERFLOW",""],["PATH_MAX",""],["PDP_ENDIAN",""],["PIPE_BUF",""],["PLOSS",""],["PTHREAD_DESTRUCTOR_ITERATIONS",""],["PTHREAD_KEYS_MAX",""],["PTHREAD_STACK_MIN",""],["PTRDIFF_MAX",""],["PTRDIFF_MIN",""],["P_tmpdir",""],["RAND_MAX",""],["RE_DUP_MAX",""],["RTSIG_MAX",""],["SEEK_CUR",""],["SEEK_END",""],["SEEK_SET",""],["SEM_VALUE_MAX",""],["SIG_ATOMIC_MAX",""],["SIG_ATOMIC_MIN",""],["SING",""],["SIZE_MAX",""],["TCDBTBTREE",""],["TCDBTFIXED",""],["TCDBTHASH",""],["TCDBTTABLE",""],["TCECLOSE",""],["TCEDATACOMPRESS",""],["TCEICOMPRESS",""],["TCEINVALID",""],["TCEKEEP",""],["TCELOCK",""],["TCEMETA",""],["TCEMISC",""],["TCEMKDIR",""],["TCEMMAP",""],["TCENOFILE",""],["TCENOPERM",""],["TCENOREC",""],["TCEOPEN",""],["TCEREAD",""],["TCERENAME",""],["TCERHEAD",""],["TCERMDIR",""],["TCESEEK",""],["TCESTAT",""],["TCESUCCESS",""],["TCESYNC",""],["TCETHREAD",""],["TCETR",""],["TCETRUNC",""],["TCEUNLINK",""],["TCEWRITE",""],["TCFCUR",""],["TCFEND",""],["TCFILEMODE",""],["TCFSTART",""],["TCIOBUFSIZ",""],["TCKWMUBRCT",""],["TCKWMUCTRL",""],["TCKWMUTAB",""],["TCKWNOOVER",""],["TCKWPULEAD",""],["TCLISTINYNUM",""],["TCMAPTINYBNUM",""],["TCUNLOWER",""],["TCUNNOACC",""],["TCUNSPACE",""],["TCUNWIDTH",""],["TIMER_ABSTIME",""],["TIME_UTC",""],["TLOSS",""],["TMP_MAX",""],["TTY_NAME_MAX",""],["UINT16_MAX",""],["UINT32_MAX",""],["UINT8_MAX",""],["UINTPTR_MAX",""],["UINT_FAST16_MAX",""],["UINT_FAST32_MAX",""],["UINT_FAST8_MAX",""],["UINT_LEAST16_MAX",""],["UINT_LEAST32_MAX",""],["UINT_LEAST8_MAX",""],["UNDERFLOW",""],["WCONTINUED",""],["WEXITED",""],["WINT_MAX",""],["WINT_MIN",""],["WNOHANG",""],["WNOWAIT",""],["WSTOPPED",""],["WUNTRACED",""],["XATTR_LIST_MAX",""],["XATTR_NAME_MAX",""],["XATTR_SIZE_MAX",""],["_ALLOCA_H",""],["_ATFILE_SOURCE",""],["_BITS_BYTESWAP_H",""],["_BITS_POSIX1_LIM_H",""],["_BITS_POSIX2_LIM_H",""],["_BITS_PTHREADTYPES_H",""],["_BITS_TIME_H",""],["_BITS_TYPESIZES_H",""],["_BITS_TYPES_H",""],["_BITS_WCHAR_H",""],["_BSD_SOURCE",""],["_DEFAULT_SOURCE",""],["_ENDIAN_H",""],["_FEATURES_H",""],["_G_BUFSIZ",""],["_G_HAVE_MMAP",""],["_G_HAVE_MREMAP",""],["_G_IO_IO_FILE_VERSION",""],["_G_config_h",""],["_IOFBF",""],["_IOLBF",""],["_IONBF",""],["_IOS_APPEND",""],["_IOS_ATEND",""],["_IOS_BIN",""],["_IOS_INPUT",""],["_IOS_NOCREATE",""],["_IOS_NOREPLACE",""],["_IOS_OUTPUT",""],["_IOS_TRUNC",""],["_IO_BAD_SEEN",""],["_IO_BOOLALPHA",""],["_IO_BUFSIZ",""],["_IO_CURRENTLY_PUTTING",""],["_IO_DEC",""],["_IO_DELETE_DONT_CLOSE",""],["_IO_DONT_CLOSE",""],["_IO_EOF_SEEN",""],["_IO_ERR_SEEN",""],["_IO_FIXED",""],["_IO_FLAGS2_MMAP",""],["_IO_FLAGS2_NOTCANCEL",""],["_IO_FLAGS2_USER_WBUF",""],["_IO_HEX",""],["_IO_INTERNAL",""],["_IO_IN_BACKUP",""],["_IO_IS_APPENDING",""],["_IO_IS_FILEBUF",""],["_IO_LEFT",""],["_IO_LINE_BUF",""],["_IO_LINKED",""],["_IO_MAGIC",""],["_IO_MAGIC_MASK",""],["_IO_NO_READS",""],["_IO_NO_WRITES",""],["_IO_OCT",""],["_IO_RIGHT",""],["_IO_SCIENTIFIC",""],["_IO_SHOWBASE",""],["_IO_SHOWPOINT",""],["_IO_SHOWPOS",""],["_IO_SKIPWS",""],["_IO_STDIO",""],["_IO_TIED_PUT_GET",""],["_IO_UNBUFFERED",""],["_IO_UNIFIED_JUMPTABLES",""],["_IO_UNITBUF",""],["_IO_UPPERCASE",""],["_IO_USER_BUF",""],["_IO_USER_LOCK",""],["_LIBC_LIMITS_H_",""],["_LIB_VERSION_TYPE__IEEE_",""],["_LIB_VERSION_TYPE__ISOC_",""],["_LIB_VERSION_TYPE__POSIX_",""],["_LIB_VERSION_TYPE__SVID_",""],["_LIB_VERSION_TYPE__XOPEN_",""],["_MATH_H",""],["_MATH_H_MATHDEF",""],["_OLD_STDIO_MAGIC",""],["_POSIX2_BC_BASE_MAX",""],["_POSIX2_BC_DIM_MAX",""],["_POSIX2_BC_SCALE_MAX",""],["_POSIX2_BC_STRING_MAX",""],["_POSIX2_CHARCLASS_NAME_MAX",""],["_POSIX2_COLL_WEIGHTS_MAX",""],["_POSIX2_EXPR_NEST_MAX",""],["_POSIX2_LINE_MAX",""],["_POSIX2_RE_DUP_MAX",""],["_POSIX_AIO_LISTIO_MAX",""],["_POSIX_AIO_MAX",""],["_POSIX_ARG_MAX",""],["_POSIX_CHILD_MAX",""],["_POSIX_CLOCKRES_MIN",""],["_POSIX_C_SOURCE",""],["_POSIX_DELAYTIMER_MAX",""],["_POSIX_HOST_NAME_MAX",""],["_POSIX_LINK_MAX",""],["_POSIX_LOGIN_NAME_MAX",""],["_POSIX_MAX_CANON",""],["_POSIX_MAX_INPUT",""],["_POSIX_MQ_OPEN_MAX",""],["_POSIX_MQ_PRIO_MAX",""],["_POSIX_NAME_MAX",""],["_POSIX_NGROUPS_MAX",""],["_POSIX_OPEN_MAX",""],["_POSIX_PATH_MAX",""],["_POSIX_PIPE_BUF",""],["_POSIX_RE_DUP_MAX",""],["_POSIX_RTSIG_MAX",""],["_POSIX_SEM_NSEMS_MAX",""],["_POSIX_SEM_VALUE_MAX",""],["_POSIX_SIGQUEUE_MAX",""],["_POSIX_SOURCE",""],["_POSIX_SSIZE_MAX",""],["_POSIX_STREAM_MAX",""],["_POSIX_SYMLINK_MAX",""],["_POSIX_SYMLOOP_MAX",""],["_POSIX_THREAD_DESTRUCTOR_ITERATIONS",""],["_POSIX_THREAD_KEYS_MAX",""],["_POSIX_THREAD_THREADS_MAX",""],["_POSIX_TIMER_MAX",""],["_POSIX_TTY_NAME_MAX",""],["_POSIX_TZNAME_MAX",""],["_SIGSET_H_types",""],["_STDC_PREDEF_H",""],["_STDINT_H",""],["_STDIO_H",""],["_STDLIB_H",""],["_STRUCT_TIMEVAL",""],["_SVID_SOURCE",""],["_SYS_CDEFS_H",""],["_SYS_SELECT_H",""],["_SYS_SYSMACROS_H",""],["_SYS_TYPES_H",""],["_TC_FORMATVER",""],["_TC_LIBVER",""],["_TIME_H",""],["_XLOCALE_H",""],["__BIG_ENDIAN",""],["__BIT_TYPES_DEFINED__",""],["__BYTE_ORDER",""],["__ENUM_IDTYPE_T",""],["__FD_SETSIZE",""],["__FD_ZERO_STOS",""],["__FILE_defined",""],["__FLOAT_WORD_ORDER",""],["__GLIBC_MINOR__",""],["__GLIBC__",""],["__GNUC_VA_LIST",""],["__GNU_LIBRARY__",""],["__INO_T_MATCHES_INO64_T",""],["__LITTLE_ENDIAN",""],["__MATH_DECLARE_LDOUBLE",""],["__OFF_T_MATCHES_OFF64_T",""],["__PDP_ENDIAN",""],["__PTHREAD_MUTEX_HAVE_ELISION",""],["__PTHREAD_MUTEX_HAVE_PREV",""],["__PTHREAD_RWLOCK_INT_FLAGS_SHARED",""],["__SIZEOF_PTHREAD_ATTR_T",""],["__SIZEOF_PTHREAD_BARRIERATTR_T",""],["__SIZEOF_PTHREAD_BARRIER_T",""],["__SIZEOF_PTHREAD_CONDATTR_T",""],["__SIZEOF_PTHREAD_COND_T",""],["__SIZEOF_PTHREAD_MUTEXATTR_T",""],["__SIZEOF_PTHREAD_MUTEX_T",""],["__SIZEOF_PTHREAD_RWLOCKATTR_T",""],["__SIZEOF_PTHREAD_RWLOCK_T",""],["__STDC_IEC_559_COMPLEX__",""],["__STDC_IEC_559__",""],["__STDC_ISO_10646__",""],["__STDC_NO_THREADS__",""],["__SYSCALL_WORDSIZE",""],["__USE_ATFILE",""],["__USE_BSD",""],["__USE_FORTIFY_LEVEL",""],["__USE_ISOC11",""],["__USE_ISOC95",""],["__USE_ISOC99",""],["__USE_MISC",""],["__USE_POSIX",""],["__USE_POSIX199309",""],["__USE_POSIX199506",""],["__USE_POSIX2",""],["__USE_POSIX_IMPLICITLY",""],["__USE_SVID",""],["__USE_XOPEN2K",""],["__USE_XOPEN2K8",""],["__WALL",""],["__WCLONE",""],["__WCOREFLAG",""],["__WNOTHREAD",""],["__WORDSIZE",""],["__WORDSIZE_TIME64_COMPAT32",""],["__W_CONTINUED",""],["____FILE_defined",""],["____mbstate_t_defined",""],["__bool_true_false_are_defined",""],["__clock_t_defined",""],["__clockid_t_defined",""],["__codecvt_result___codecvt_error",""],["__codecvt_result___codecvt_noconv",""],["__codecvt_result___codecvt_ok",""],["__codecvt_result___codecvt_partial",""],["__have_pthread_attr_t",""],["__ldiv_t_defined",""],["__lldiv_t_defined",""],["__time_t_defined",""],["__timer_t_defined",""],["__timespec_defined",""],["bson_binary_subtype_t_BSON_BIN_BINARY",""],["bson_binary_subtype_t_BSON_BIN_BINARY_OLD","< Deprecated"],["bson_binary_subtype_t_BSON_BIN_FUNC",""],["bson_binary_subtype_t_BSON_BIN_MD5",""],["bson_binary_subtype_t_BSON_BIN_USER",""],["bson_binary_subtype_t_BSON_BIN_UUID",""],["bson_binary_subtype_t_BSON_BIN_UUID_OLD","< Deprecated"],["bson_error_t_BSON_SIZE_OVERFLOW","< Trying to create a BSON object larger than INT_MAX."],["bson_flags_t_BSON_FLAG_QUERY_MODE",""],["bson_flags_t_BSON_FLAG_STACK_ALLOCATED","< If it set BSON data is allocated on stack and realloc should deal with this case"],["bson_merge_array_mode_BSON_MERGE_ARRAY_ADDSET",""],["bson_merge_array_mode_BSON_MERGE_ARRAY_PULL",""],["bson_merge_array_mode_BSON_MERGE_ARRAY_PUSH",""],["bson_traverse_flags_t_BSON_TRAVERSE_ARRAYS_EXCLUDED",""],["bson_traverse_flags_t_BSON_TRAVERSE_OBJECTS_EXCLUDED",""],["bson_type_BSON_ARRAY",""],["bson_type_BSON_BINDATA",""],["bson_type_BSON_BOOL",""],["bson_type_BSON_CODE",""],["bson_type_BSON_CODEWSCOPE",""],["bson_type_BSON_DATE",""],["bson_type_BSON_DBREF","< Deprecated."],["bson_type_BSON_DOUBLE",""],["bson_type_BSON_EOO",""],["bson_type_BSON_INT",""],["bson_type_BSON_LONG",""],["bson_type_BSON_NULL",""],["bson_type_BSON_OBJECT",""],["bson_type_BSON_OID",""],["bson_type_BSON_REGEX",""],["bson_type_BSON_STRING",""],["bson_type_BSON_SYMBOL","< Deprecated."],["bson_type_BSON_TIMESTAMP",""],["bson_type_BSON_UNDEFINED","< Deprecated"],["bson_validity_t_BSON_ALREADY_FINISHED","< Trying to modify a finished BSON object."],["bson_validity_t_BSON_ERROR_ANY","< Unspecified error"],["bson_validity_t_BSON_FIELD_HAS_DOT","< Warning: key contains '.' character."],["bson_validity_t_BSON_FIELD_INIT_DOLLAR","< Warning: key starts with '$' character."],["bson_validity_t_BSON_NOT_FINISHED","< BSON object not finished"],["bson_validity_t_BSON_NOT_UTF8","< A key or a string is not valid UTF-8."],["bson_validity_t_BSON_VALID","< BSON is valid and UTF-8 compliant."],["bson_visitor_cmd_t_BSON_VCMD_OK",""],["bson_visitor_cmd_t_BSON_VCMD_SKIP_AFTER",""],["bson_visitor_cmd_t_BSON_VCMD_SKIP_NESTED",""],["bson_visitor_cmd_t_BSON_VCMD_TERMINATE",""],["false_",""],["idtype_t_P_ALL",""],["idtype_t_P_PGID",""],["idtype_t_P_PID",""],["math_errhandling",""],["true_",""]],"fn":[["_Exit",""],["_IO_feof",""],["_IO_ferror",""],["_IO_flockfile",""],["_IO_free_backup_area",""],["_IO_ftrylockfile",""],["_IO_funlockfile",""],["_IO_getc",""],["_IO_padn",""],["_IO_peekc_locked",""],["_IO_putc",""],["_IO_seekoff",""],["_IO_seekpos",""],["_IO_sgetn",""],["_IO_vfprintf",""],["_IO_vfscanf",""],["__acos",""],["__acosf",""],["__acosh",""],["__acoshf",""],["__acoshl",""],["__acosl",""],["__asin",""],["__asinf",""],["__asinh",""],["__asinhf",""],["__asinhl",""],["__asinl",""],["__atan",""],["__atan2",""],["__atan2f",""],["__atan2l",""],["__atanf",""],["__atanh",""],["__atanhf",""],["__atanhl",""],["__atanl",""],["__cbrt",""],["__cbrtf",""],["__cbrtl",""],["__ceil",""],["__ceilf",""],["__ceill",""],["__copysign",""],["__copysignf",""],["__copysignl",""],["__cos",""],["__cosf",""],["__cosh",""],["__coshf",""],["__coshl",""],["__cosl",""],["__ctype_get_mb_cur_max",""],["__drem",""],["__dremf",""],["__dreml",""],["__erf",""],["__erfc",""],["__erfcf",""],["__erfcl",""],["__erff",""],["__erfl",""],["__exp",""],["__exp2",""],["__exp2f",""],["__exp2l",""],["__expf",""],["__expl",""],["__expm1",""],["__expm1f",""],["__expm1l",""],["__fabs",""],["__fabsf",""],["__fabsl",""],["__fdim",""],["__fdimf",""],["__fdiml",""],["__finite",""],["__finitef",""],["__finitel",""],["__floor",""],["__floorf",""],["__floorl",""],["__fma",""],["__fmaf",""],["__fmal",""],["__fmax",""],["__fmaxf",""],["__fmaxl",""],["__fmin",""],["__fminf",""],["__fminl",""],["__fmod",""],["__fmodf",""],["__fmodl",""],["__fpclassify",""],["__fpclassifyf",""],["__fpclassifyl",""],["__frexp",""],["__frexpf",""],["__frexpl",""],["__gamma",""],["__gammaf",""],["__gammal",""],["__getdelim",""],["__hypot",""],["__hypotf",""],["__hypotl",""],["__ilogb",""],["__ilogbf",""],["__ilogbl",""],["__isinf",""],["__isinff",""],["__isinfl",""],["__isnan",""],["__isnanf",""],["__isnanl",""],["__j0",""],["__j0f",""],["__j0l",""],["__j1",""],["__j1f",""],["__j1l",""],["__jn",""],["__jnf",""],["__jnl",""],["__ldexp",""],["__ldexpf",""],["__ldexpl",""],["__lgamma",""],["__lgamma_r",""],["__lgammaf",""],["__lgammaf_r",""],["__lgammal",""],["__lgammal_r",""],["__llrint",""],["__llrintf",""],["__llrintl",""],["__llround",""],["__llroundf",""],["__llroundl",""],["__log",""],["__log10",""],["__log10f",""],["__log10l",""],["__log1p",""],["__log1pf",""],["__log1pl",""],["__log2",""],["__log2f",""],["__log2l",""],["__logb",""],["__logbf",""],["__logbl",""],["__logf",""],["__logl",""],["__lrint",""],["__lrintf",""],["__lrintl",""],["__lround",""],["__lroundf",""],["__lroundl",""],["__modf",""],["__modff",""],["__modfl",""],["__nan",""],["__nanf",""],["__nanl",""],["__nearbyint",""],["__nearbyintf",""],["__nearbyintl",""],["__nextafter",""],["__nextafterf",""],["__nextafterl",""],["__nexttoward",""],["__nexttowardf",""],["__nexttowardl",""],["__overflow",""],["__pow",""],["__powf",""],["__powl",""],["__remainder",""],["__remainderf",""],["__remainderl",""],["__remquo",""],["__remquof",""],["__remquol",""],["__rint",""],["__rintf",""],["__rintl",""],["__round",""],["__roundf",""],["__roundl",""],["__scalb",""],["__scalbf",""],["__scalbl",""],["__scalbln",""],["__scalblnf",""],["__scalblnl",""],["__scalbn",""],["__scalbnf",""],["__scalbnl",""],["__signbit",""],["__signbitf",""],["__signbitl",""],["__significand",""],["__significandf",""],["__significandl",""],["__sin",""],["__sinf",""],["__sinh",""],["__sinhf",""],["__sinhl",""],["__sinl",""],["__sqrt",""],["__sqrtf",""],["__sqrtl",""],["__tan",""],["__tanf",""],["__tanh",""],["__tanhf",""],["__tanhl",""],["__tanl",""],["__tgamma",""],["__tgammaf",""],["__tgammal",""],["__trunc",""],["__truncf",""],["__truncl",""],["__uflow",""],["__underflow",""],["__y0",""],["__y0f",""],["__y0l",""],["__y1",""],["__y1f",""],["__y1l",""],["__yn",""],["__ynf",""],["__ynl",""],["a64l",""],["abort",""],["abs",""],["acos",""],["acosf",""],["acosh",""],["acoshf",""],["acoshl",""],["acosl",""],["aligned_alloc",""],["alloca",""],["asctime",""],["asctime_r",""],["asin",""],["asinf",""],["asinh",""],["asinhf",""],["asinhl",""],["asinl",""],["at_quick_exit",""],["atan",""],["atan2",""],["atan2f",""],["atan2l",""],["atanf",""],["atanh",""],["atanhf",""],["atanhl",""],["atanl",""],["atexit",""],["atof",""],["atoi",""],["atol",""],["atoll",""],["bsearch",""],["bson2json","Convert BSON into JSON buffer."],["bson_append",""],["bson_append_array_from_iterator",""],["bson_append_binary","Append binary data to a bson."],["bson_append_bool","Append a bson_bool_t to a bson."],["bson_append_bson","Append bson data to a bson."],["bson_append_code","Append code to a bson."],["bson_append_code_n","Append len bytes of code to a bson."],["bson_append_code_w_scope","Append code to a bson with scope."],["bson_append_code_w_scope_n","Append len bytes of code to a bson with scope."],["bson_append_date","Append a bson_date_t value to a bson."],["bson_append_double","Append an double to a bson."],["bson_append_element","Append a BSON element to a bson from the current point of an iterator."],["bson_append_field_from_iterator","Append current field from iterator into bson object."],["bson_append_field_from_iterator2","Append current field value from iterator into bson object under specified string key."],["bson_append_finish_array","Finish appending a new object or array to a bson. This is simply an alias for bson_append_finish_object."],["bson_append_finish_object","Finish appending a new object or array to a bson."],["bson_append_int","Append an int to a bson."],["bson_append_long","Append an long to a bson."],["bson_append_new_oid","Append a bson_oid_t to a bson."],["bson_append_null","Append a null value to a bson."],["bson_append_object_from_iterator",""],["bson_append_oid","Append a previously created bson_oid_t to a bson object."],["bson_append_regex","Append a regex value to a bson."],["bson_append_start_array","Start appending a new array to a bson."],["bson_append_start_array2",""],["bson_append_start_object","Start appending a new object to a bson."],["bson_append_start_object2",""],["bson_append_string","Append a string to a bson."],["bson_append_string_n","Append len bytes of a string to a bson."],["bson_append_symbol","Append a symbol to a bson."],["bson_append_symbol_n","Append len bytes of a symbol to a bson."],["bson_append_time_t","Append a time_t value to a bson."],["bson_append_timestamp","Append a bson_timestamp_t value to a bson."],["bson_append_timestamp2",""],["bson_append_undefined","Append an undefined value to a bson."],["bson_buffer_size",""],["bson_builder_error","Invoke the error handler, but do not exit."],["bson_check_duplicate_keys","Check duplicate keys @return true if bson contains duplicate keys"],["bson_compare","Compares field path primitive values of two BSONs @param bsdata1 BSON raw data @param bsdata2 BSON raw data @param fpath Field path to the field @param fplen Length of fpath value"],["bson_compare_bool",""],["bson_compare_double",""],["bson_compare_fpaths",""],["bson_compare_it_current",""],["bson_compare_long",""],["bson_compare_string",""],["bson_copy","Make a complete copy of the a BSON object. The source bson object must be in a finished state; otherwise, the copy will fail."],["bson_create",""],["bson_create_from_buffer",""],["bson_create_from_buffer2",""],["bson_create_from_iterator",""],["bson_data","Return a pointer to the raw buffer stored by this bson object."],["bson_data2",""],["bson_del","The bson_del() performs bson_destroy() then frees bson object itself. @param b"],["bson_destroy","Destroy a bson object. Clears bson object and frees internal memory buffers held by bson object BUT does not delete bson object itself @param b the bson object to destroy."],["bson_dispose",""],["bson_dup","Duplicates BSON object. @param src BSON @return Finished copy of src"],["bson_empty","Returns a pointer to a static empty BSON object."],["bson_ensure_space","Grow a bson object."],["bson_fatal","Exit fatally."],["bson_fatal_msg","Exit fatally with an error message."],["bson_find","Advance a bson_iterator to the named field."],["bson_find_fieldpath_value","Advance specified iterator 'it' to field value pointing by 'fieldpath'/ Field path string format: 'field1.nestedfield1.nestedfield.2'. If specified field not found BSON_EOO will be returned."],["bson_find_fieldpath_value2",""],["bson_find_fieldpath_value3",""],["bson_find_from_buffer",""],["bson_find_merged_arrays",""],["bson_find_unmerged_arrays",""],["bson_finish","Finalize a bson object."],["bson_first_errormsg",""],["bson_fix_duplicate_keys","Remove duplicate keys from bson:   - merge objects and arrays with same key:    { a : { b : \"value 1\" }, a : { c : \"value 2\" } } -> { a : { b : \"value 1\", c : \"value 2\" } }   - keep last value for non object and non array values    { a : \"value 1\", a : \"value 2\" } -> { a : \"value 2\" }"],["bson_free",""],["bson_init","Initialize a new bson object. If not created with bson_new, you must initialize each new bson object using this function."],["bson_init_as_query","Intialize a new bson object. In query contruction mode allowing dot and dollar chars in field names. @param b"],["bson_init_data","Initialize a BSON object, and point its data pointer to the provided char*."],["bson_init_finished_data",""],["bson_init_on_stack",""],["bson_init_size","Initialize a BSON object and set its buffer to the given size."],["bson_init_with_data",""],["bson_inplace_set_bool",""],["bson_inplace_set_double",""],["bson_inplace_set_long",""],["bson_int64_to_double","Cast an int64_t to double. This is necessary for embedding in certain environments."],["bson_iterator_bin_data","Get the value of the BSON binary object currently pointed to by the iterator."],["bson_iterator_bin_len","Get the length of the BSON binary object currently pointed to by the iterator."],["bson_iterator_bin_type","Get the type of the BSON binary object currently pointed to by the iterator."],["bson_iterator_bool","Get the boolean value of the BSON object currently pointed to by the iterator."],["bson_iterator_bool_raw","Get the bson_bool_t value of the BSON object currently pointed to by the iterator. Assumes the correct type is used."],["bson_iterator_code","Get the code value of the BSON object currently pointed to by the iterator. Works with bson_code, bson_codewscope, and BSON_STRING returns NULL for everything else."],["bson_iterator_code_scope","Calls bson_empty on scope if not a bson_codewscope"],["bson_iterator_create",""],["bson_iterator_date","Get the date value of the BSON object currently pointed to by the iterator."],["bson_iterator_dispose",""],["bson_iterator_double","Get the double value of the BSON object currently pointed to by the iterator."],["bson_iterator_double_raw","Get the double value of the BSON object currently pointed to by the iterator. Assumes the correct type is used."],["bson_iterator_from_buffer","Initialize a bson iterator from a const char* buffer. Note that this is mostly used internally."],["bson_iterator_init","Initialize a bson_iterator."],["bson_iterator_int","Get the int value of the BSON object currently pointed to by the iterator."],["bson_iterator_int_raw","Get the int value of the BSON object currently pointed to by the iterator. Assumes the correct type is used."],["bson_iterator_key","Get the key of the BSON object currently pointed to by the iterator."],["bson_iterator_long","Get the long value of the BSON object currently pointed to by the iterator."],["bson_iterator_long_raw","Get the long value of the BSON object currently pointed to by the iterator. Assumes the correct type is used."],["bson_iterator_more","Check to see if the bson_iterator has more data."],["bson_iterator_next","Point the iterator at the next BSON object."],["bson_iterator_oid","Get the bson_oid_t value of the BSON object currently pointed to by the iterator."],["bson_iterator_regex","Get the value of the BSON regex object currently pointed to by the iterator."],["bson_iterator_regex_opts","Get the options of the BSON regex object currently pointed to by the iterator."],["bson_iterator_string","Get the string value of the BSON object currently pointed to by the iterator."],["bson_iterator_string_len","Get the string length of the BSON object currently pointed to by the iterator."],["bson_iterator_subiterator","Get a bson_iterator that on the BSON subobject."],["bson_iterator_subobject","Get the BSON subobject currently pointed to by the iterator."],["bson_iterator_time_t","Get the time value of the BSON object currently pointed to by the iterator."],["bson_iterator_timestamp","Get the timestamp value of the BSON object currently pointed to by the iterator."],["bson_iterator_timestamp_increment",""],["bson_iterator_timestamp_time",""],["bson_iterator_type","Get the type of the BSON object currently pointed to by the iterator."],["bson_iterator_value","Get the value of the BSON object currently pointed to by the iterator."],["bson_malloc","Allocates memory and checks return value, exiting fatally if malloc() fails."],["bson_merge","Merge bson  `b2` into `b1` saving result the 'out' object. `b1` & `b2` bson must be finished BSONS. Resulting 'out' bson must be allocated and not finished."],["bson_merge2",""],["bson_merge_arrays",""],["bson_merge_fieldpaths","Merge bsons. `bsdata2` may contain field path keys (eg: 'foo.bar')."],["bson_merge_recursive","Recursive merge bson  `b2` into `b1` saving result the 'out' object. `b1` & `b2` bson must be finished BSONS. Resulting 'out' bson must be allocated and not finished."],["bson_merge_recursive2",""],["bson_numstr",""],["bson_numstrn",""],["bson_oid_from_string","Create a bson_oid_t from a string."],["bson_oid_gen","Create a bson_oid object."],["bson_oid_generated_time","Get the time a bson_oid_t was created."],["bson_oid_to_string","Create a string representation of the bson_oid_t."],["bson_print_raw","Print a string representation of a BSON object."],["bson_realloc","Changes the size of allocated memory and checks return value, exiting fatally if realloc() fails."],["bson_rename","@brief Rename a fields specified by `fields` rename mapping."],["bson_reset",""],["bson_safe_init","Initialize a BSON object. If not created with bson_new, you must initialize each new bson object using this function. Report problems with memory allocation."],["bson_safe_init_as_query","Intialize a BSON object. In query contruction mode allowing dot and dollar chars in field names. Report problems with memory allocation."],["bson_safe_init_size","Initialize a BSON object and set its buffer to the given size. Report problems with memory allocation."],["bson_set_oid_fuzz","Set a function to be used to generate the second four bytes of an object id."],["bson_set_oid_inc","Set a function to be used to generate the incrementing part of an object id (last four bytes). If you need thread-safety in generating object ids, you should set this function."],["bson_size","Size of a BSON object."],["bson_size2",""],["bson_strip","Include or exclude fpaths in the specified BSON and put resulting data into `bsout`. On completion it finishes `bsout` object."],["bson_strip2",""],["bson_swap_endian32",""],["bson_swap_endian64",""],["bson_validate","@brief Validate bson object. Set the bs->err bitmask as validation result."],["bson_visit_fields",""],["calloc",""],["cbrt",""],["cbrtf",""],["cbrtl",""],["ceil",""],["ceilf",""],["ceill",""],["cfree",""],["clearenv",""],["clearerr",""],["clearerr_unlocked",""],["clock",""],["clock_getcpuclockid",""],["clock_getres",""],["clock_gettime",""],["clock_nanosleep",""],["clock_settime",""],["copysign",""],["copysignf",""],["copysignl",""],["cos",""],["cosf",""],["cosh",""],["coshf",""],["coshl",""],["cosl",""],["ctermid",""],["ctime",""],["ctime_r",""],["difftime",""],["div",""],["dprintf",""],["drand48",""],["drand48_r",""],["drem",""],["dremf",""],["dreml",""],["dysize",""],["ecvt",""],["ecvt_r",""],["ejdbclose","Close a table database object. If a writer opens a database but does not close it appropriately, the database will be broken. @param jb EJDB handle. @return If successful return true, otherwise return false."],["ejdbcommand","Execute the ejdb database command."],["ejdbcommand2",""],["ejdbcreatecoll","Same as ejdbgetcoll() but automatically creates new collection if it does't exists."],["ejdbcreatequery","Create the query object."],["ejdbcreatequery2","Alternative query creation method convenient to use with `ejdbqueryaddor` and `ejdbqueryhints` methods. @param jb EJDB database handle. @param qobj Main query object BSON data. @return On success return query handle. On error returns NULL."],["ejdbdel","Delete database object. If the database is not closed, it is closed implicitly. Note that the deleted object and its derivatives can not be used anymore @param jb"],["ejdbecode","Get the last happened error code of a EJDB database object. @param jb @return The return value is the last happened error code."],["ejdberrmsg","Get the message string corresponding to an error code. @param ecode `ecode' specifies the error code. @return The return value is the message string of the error code."],["ejdbexport","Exports database collections data to the specified directory. Database read lock will be taken on each collection."],["ejdbformatversion","Return EJDB database format version."],["ejdbformatversionmajor","Return EJDB database `major` format version."],["ejdbformatversionminor","Return EJDB database `minor` format version."],["ejdbformatversionpatch","Return EJDB database `patch` format version."],["ejdbgetcoll","Retrieve collection handle for collection specified `collname`. If collection with specified name does't exists it will return NULL. @param jb EJDB handle. @param colname Name of collection. @return If error NULL will be returned."],["ejdbgetcolls","Allocate a new TCLIST populated with shallow copy of all collection handles (EJCOLL) currently opened. @param jb EJDB handle. @return If error NULL will be returned."],["ejdbimport","Imports previously exported collections data into ejdb. Global database write lock will be applied during import operation."],["ejdbisopen","Return true if database is in open state @param jb EJDB database hadle @return True if database is in open state otherwise false"],["ejdbisvalidoidstr","Return true if a passed `oid` string cat be converted to valid 12 byte BSON object identifier (OID). @param oid String"],["ejdbloadbson","Load BSON object with specified 'oid'. If loaded bson is not NULL it must be freed by bson_del(). @param coll @param oid @return BSON object if exists otherwise return NULL."],["ejdbmeta","Gets description of EJDB database and its collections."],["ejdbnew","Create a EJDB database object. On error returns NULL. Created pointer must be freed by ejdbdel() @return The return value is the new EJDB database object or NULL if error."],["ejdbopen","Opens EJDB database. @param jb   Database object created with `ejdbnew' @param path Path to the database file. @param mode Open mode bitmask flags:`JBOREADER`Open as a reader.`JBOWRITER`Open as a writer.`JBOCREAT`Create db if it not exists`JBOTRUNC`Truncate db.`JBONOLCK`Open without locking.`JBOLCKNB`Lock without blocking.`JBOTSYNC` Synchronize every transaction. @return"],["ejdbqresultbsondata","Gets the pointer of query result BSON data buffer at the specified position `pos`. If `qr` is `NULL` or `idx` is put of index range then the `NULL` pointer will be returned. @param qr Query result set object. @param pos Zero based position of the record."],["ejdbqresultdispose","Disposes the query result set and frees a records buffers."],["ejdbqresultnum","Returns the number of elements in the query result set. @param qr Query result set. Can be `NULL` in this case 0 is returned."],["ejdbqrydistinct","Provides 'distinct' operation over query"],["ejdbqryexecute","Execute the query against EJDB collection. It is better to execute update queries with specified `JBQRYCOUNT` control flag avoid unnecessarily rows fetching."],["ejdbqueryaddor","Add OR restriction to query object. @param jb EJDB database handle. @param q Query handle. @param orbsdata OR restriction BSON data. @return NULL on error."],["ejdbquerydel","Destroy query object created with ejdbcreatequery(). @param q"],["ejdbqueryhints","Set hints for the query. @param jb EJDB database handle. @param hintsbsdata Query hints BSON data. @return NULL on error."],["ejdbrmbson","Remove BSON object from collection. The `oid` argument should points the primary key (_id) of the bson record to be removed. @param coll JSON collection ref. @param oid BSON object id pointer. @return"],["ejdbrmcoll","Removes collections specified by `colname` @param jb EJDB handle. @param colname Name of collection. @param unlink It true the collection db file and all of its index files will be removed. @return If successful return true, otherwise return false."],["ejdbsavebson","Persist BSON object in the collection. If saved bson does't have _id primary key then `oid` will be set to generated bson _id, otherwise `oid` will be set to the current bson's _id field."],["ejdbsavebson2","Persist BSON object in the collection. If saved bson does't have _id primary key then `oid` will be set to generated bson _id, otherwise `oid` will be set to the current bson's _id field."],["ejdbsavebson3",""],["ejdbsetindex","Set index for JSON field in EJDB collection."],["ejdbsyncdb","Synchronize entire EJDB database and all of its collections with storage. @param jb Database hand"],["ejdbsyncoll","Synchronize content of a EJDB collection database with the file on device. @param jcoll EJDB collection. @return On success return true."],["ejdbtranabort","Abort transaction for EJDB collection."],["ejdbtranbegin","Begin transaction for EJDB collection."],["ejdbtrancommit","Commit transaction for EJDB collection."],["ejdbtranstatus","Get current transaction status, it will be placed into txActive"],["ejdbupdate","Convenient method to execute update queries."],["ejdbversion","Return EJDB library version string. Eg: \"1.1.13\""],["erand48",""],["erand48_r",""],["erf",""],["erfc",""],["erfcf",""],["erfcl",""],["erff",""],["erfl",""],["exit",""],["exp",""],["exp2",""],["exp2f",""],["exp2l",""],["expf",""],["expl",""],["expm1",""],["expm1f",""],["expm1l",""],["fabs",""],["fabsf",""],["fabsl",""],["fclose",""],["fcvt",""],["fcvt_r",""],["fdim",""],["fdimf",""],["fdiml",""],["fdopen",""],["feof",""],["feof_unlocked",""],["ferror",""],["ferror_unlocked",""],["fflush",""],["fflush_unlocked",""],["fgetc",""],["fgetc_unlocked",""],["fgetpos",""],["fgets",""],["fileno",""],["fileno_unlocked",""],["finite",""],["finitef",""],["finitel",""],["flockfile",""],["floor",""],["floorf",""],["floorl",""],["fma",""],["fmaf",""],["fmal",""],["fmax",""],["fmaxf",""],["fmaxl",""],["fmemopen",""],["fmin",""],["fminf",""],["fminl",""],["fmod",""],["fmodf",""],["fmodl",""],["fopen",""],["fprintf",""],["fputc",""],["fputc_unlocked",""],["fputs",""],["fread",""],["fread_unlocked",""],["free",""],["freopen",""],["frexp",""],["frexpf",""],["frexpl",""],["fscanf",""],["fscanf1",""],["fseek",""],["fseeko",""],["fsetpos",""],["ftell",""],["ftello",""],["ftrylockfile",""],["funlockfile",""],["fwrite",""],["fwrite_unlocked",""],["gamma",""],["gammaf",""],["gammal",""],["gcvt",""],["getc",""],["getc_unlocked",""],["getchar",""],["getchar_unlocked",""],["getdelim",""],["getenv",""],["getline",""],["getloadavg",""],["getsubopt",""],["getw",""],["gmtime",""],["gmtime_r",""],["gnu_dev_major",""],["gnu_dev_makedev",""],["gnu_dev_minor",""],["hashmurmur32",""],["hashmurmur64","Get the hash value by MurMur hashing. @param buf the source buffer. @param size the size of the source buffer. @return the hash value."],["hypot",""],["hypotf",""],["hypotl",""],["ilogb",""],["ilogbf",""],["ilogbl",""],["initstate",""],["initstate_r",""],["isinf",""],["isinff",""],["isinfl",""],["isnan",""],["isnanf",""],["isnanl",""],["j0",""],["j0f",""],["j0l",""],["j1",""],["j1f",""],["j1l",""],["jn",""],["jnf",""],["jnl",""],["jrand48",""],["jrand48_r",""],["json2bson","Convert JSON into BSON object. @param jsonstr NULL terminated JSON string @return Allocated BSON object filled with given JSON data or NULL on error"],["l64a",""],["labs",""],["lcong48",""],["lcong48_r",""],["ldexp",""],["ldexpf",""],["ldexpl",""],["ldiv",""],["lgamma",""],["lgamma_r",""],["lgammaf",""],["lgammaf_r",""],["lgammal",""],["lgammal_r",""],["llabs",""],["lldiv",""],["llrint",""],["llrintf",""],["llrintl",""],["llround",""],["llroundf",""],["llroundl",""],["localtime",""],["localtime_r",""],["log",""],["log10",""],["log10f",""],["log10l",""],["log1p",""],["log1pf",""],["log1pl",""],["log2",""],["log2f",""],["log2l",""],["logb",""],["logbf",""],["logbl",""],["logf",""],["logl",""],["lrand48",""],["lrand48_r",""],["lrint",""],["lrintf",""],["lrintl",""],["lround",""],["lroundf",""],["lroundl",""],["malloc",""],["matherr",""],["mblen",""],["mbstowcs",""],["mbtowc",""],["mkdtemp",""],["mkstemp",""],["mkstemps",""],["mktemp",""],["mktime",""],["modf",""],["modff",""],["modfl",""],["mrand48",""],["mrand48_r",""],["nan",""],["nanf",""],["nanl",""],["nanosleep",""],["nearbyint",""],["nearbyintf",""],["nearbyintl",""],["nextafter",""],["nextafterf",""],["nextafterl",""],["nexttoward",""],["nexttowardf",""],["nexttowardl",""],["nrand48",""],["nrand48_r",""],["on_exit",""],["open_memstream",""],["pclose",""],["perror",""],["popen",""],["posix_memalign",""],["pow",""],["powf",""],["powl",""],["printf",""],["pselect",""],["putc",""],["putc_unlocked",""],["putchar",""],["putchar_unlocked",""],["putenv",""],["puts",""],["putw",""],["qecvt",""],["qecvt_r",""],["qfcvt",""],["qfcvt_r",""],["qgcvt",""],["qsort",""],["quick_exit",""],["rand",""],["rand_r",""],["random",""],["random_r",""],["realloc",""],["realpath",""],["remainder",""],["remainderf",""],["remainderl",""],["remove",""],["remquo",""],["remquof",""],["remquol",""],["rename",""],["renameat",""],["rewind",""],["rint",""],["rintf",""],["rintl",""],["round",""],["roundf",""],["roundl",""],["rpmatch",""],["scalb",""],["scalbf",""],["scalbl",""],["scalbln",""],["scalblnf",""],["scalblnl",""],["scalbn",""],["scalbnf",""],["scalbnl",""],["scanf",""],["scanf1",""],["seed48",""],["seed48_r",""],["select",""],["set_bson_err_handler","Set a function for error handling."],["setbuf",""],["setbuffer",""],["setenv",""],["setlinebuf",""],["setstate",""],["setstate_r",""],["setvbuf",""],["significand",""],["significandf",""],["significandl",""],["sin",""],["sinf",""],["sinh",""],["sinhf",""],["sinhl",""],["sinl",""],["snprintf",""],["sprintf",""],["sqrt",""],["sqrtf",""],["sqrtl",""],["srand",""],["srand48",""],["srand48_r",""],["srandom",""],["srandom_r",""],["sscanf",""],["sscanf1",""],["stime",""],["strftime",""],["strftime_l",""],["strtod",""],["strtof",""],["strtol",""],["strtold",""],["strtoll",""],["strtoq",""],["strtoul",""],["strtoull",""],["strtouq",""],["system",""],["tan",""],["tanf",""],["tanh",""],["tanhf",""],["tanhl",""],["tanl",""],["tcarccipher",""],["tcatof",""],["tcatof2",""],["tcatoi",""],["tcatoih",""],["tcatoix",""],["tcbasedecode",""],["tcbaseencode",""],["tcberdecode",""],["tcberencode",""],["tcbsdecode",""],["tcbsencode",""],["tcbwtdecode",""],["tcbwtencode",""],["tcbzipdecode",""],["tcbzipencode",""],["tccalendar",""],["tccalloc",""],["tcchidxdel",""],["tcchidxhash",""],["tcchidxnew",""],["tccmpdecimal",""],["tccmpint32",""],["tccmpint64",""],["tccmplexical",""],["tccopyfile",""],["tccstrescape",""],["tccstrunescape",""],["tcdatestrhttp",""],["tcdatestrwww",""],["tcdayofweek",""],["tcdeflate",""],["tcdrand",""],["tcdrandnd",""],["tcerrmsg",""],["tcfilerrno2tcerr",""],["tcfree",""],["tcfseek",""],["tcftoa","Fast conversion of a double number into a string. `cftoa' do not write into`buf' more than `max' bytes (including the terminating null byte ('\\0'))."],["tcftruncate",""],["tcgetcrc",""],["tcglobalmutexlock",""],["tcglobalmutexlockshared",""],["tcglobalmutexunlock",""],["tcglobpat",""],["tcgzipdecode",""],["tcgzipencode",""],["tchexdecode",""],["tchexencode",""],["tcicaseformat","Convert string into case insensitive normalized format. @param str Str pointer @param strlen String data length in bytes @param dstptr Allocated NULL terminated destination buffer @return In case of success the length of the resulting UTF-8 string is  returned, otherwise a negative value."],["tcinflate",""],["tcisvalidutf8str",""],["tcjetlag",""],["tcjsonescape",""],["tcjsonunescape",""],["tclistbsearch",""],["tclistclear",""],["tclistdel",""],["tclistdump",""],["tclistdup",""],["tclistinsert",""],["tclistinsert2",""],["tclistinvert",""],["tclistload",""],["tclistlsearch",""],["tclistnew",""],["tclistnew2",""],["tclistnew3",""],["tclistnum",""],["tclistover",""],["tclistover2",""],["tclistpop",""],["tclistpop2",""],["tclistprintf",""],["tclistpush",""],["tclistpush2",""],["tclistpushlist",""],["tclistpushmalloc","array list (for experts)"],["tclistpushmap",""],["tclistremove",""],["tclistremove2",""],["tclistshift",""],["tclistshift2",""],["tclistsort",""],["tclistsortci",""],["tclistsortex",""],["tclistunshift",""],["tclistunshift2",""],["tclistval",""],["tclistval2",""],["tclmax","miscellaneous utilities"],["tclmin",""],["tclock",""],["tclog2d",""],["tclog2l",""],["tclrand",""],["tcmalloc",""],["tcmapadddouble",""],["tcmapaddint",""],["tcmapclear",""],["tcmapcutfront",""],["tcmapdel",""],["tcmapdump",""],["tcmapdup",""],["tcmapget",""],["tcmapget2",""],["tcmapget3",""],["tcmapget4",""],["tcmapiterinit",""],["tcmapiterinit2",""],["tcmapiterinit3",""],["tcmapiternext",""],["tcmapiternext2",""],["tcmapiterval",""],["tcmapiterval2",""],["tcmapkeys",""],["tcmapkeys2",""],["tcmapload",""],["tcmaploadone",""],["tcmaploadoneintoxstr",""],["tcmapmove",""],["tcmapmove2",""],["tcmapmsiz",""],["tcmapnew",""],["tcmapnew2",""],["tcmapnew3",""],["tcmapout",""],["tcmapout2",""],["tcmapprintf",""],["tcmapput",""],["tcmapput2",""],["tcmapput3","hash map (for experts)"],["tcmapput4",""],["tcmapputcat",""],["tcmapputcat2",""],["tcmapputcat3",""],["tcmapputkeep",""],["tcmapputkeep2",""],["tcmapputlist",""],["tcmapputmap",""],["tcmapputproc",""],["tcmaprnum",""],["tcmapvals",""],["tcmapvals2",""],["tcmd5hash",""],["tcmdbadddouble",""],["tcmdbaddint",""],["tcmdbcutfront",""],["tcmdbdel",""],["tcmdbforeach",""],["tcmdbfwmkeys",""],["tcmdbfwmkeys2",""],["tcmdbget",""],["tcmdbget2",""],["tcmdbget3",""],["tcmdbiterinit",""],["tcmdbiterinit2",""],["tcmdbiterinit3",""],["tcmdbiternext",""],["tcmdbiternext2",""],["tcmdbmsiz",""],["tcmdbnew",""],["tcmdbnew2",""],["tcmdbout",""],["tcmdbout2",""],["tcmdbput",""],["tcmdbput2",""],["tcmdbput3","on-memory hash database (for experts)"],["tcmdbput4",""],["tcmdbputcat",""],["tcmdbputcat2",""],["tcmdbputcat3",""],["tcmdbputkeep",""],["tcmdbputkeep2",""],["tcmdbputproc",""],["tcmdbrnum",""],["tcmdbvanish",""],["tcmdbvsiz",""],["tcmdbvsiz2",""],["tcmemdup",""],["tcmimebreak",""],["tcmimedecode",""],["tcmimeencode",""],["tcmimeparts",""],["tcmpoolclear",""],["tcmpooldel",""],["tcmpoolglobal",""],["tcmpoollistnew",""],["tcmpoolmalloc",""],["tcmpoolmapnew",""],["tcmpoolnew",""],["tcmpoolpop",""],["tcmpoolpush",""],["tcmpoolpushlist",""],["tcmpoolpushmap",""],["tcmpoolpushptr",""],["tcmpoolpushtree",""],["tcmpoolpushxstr",""],["tcmpooltreenew",""],["tcmpoolxstrnew",""],["tcmstime",""],["tcmyfatal",""],["tcndbadddouble",""],["tcndbaddint",""],["tcndbcutfringe",""],["tcndbdel",""],["tcndbforeach",""],["tcndbfwmkeys",""],["tcndbfwmkeys2",""],["tcndbget",""],["tcndbget2",""],["tcndbget3",""],["tcndbiterinit",""],["tcndbiterinit2",""],["tcndbiterinit3",""],["tcndbiternext",""],["tcndbiternext2",""],["tcndbmsiz",""],["tcndbnew",""],["tcndbnew2",""],["tcndbout",""],["tcndbout2",""],["tcndbput",""],["tcndbput2",""],["tcndbput3","ordered tree (for experts)"],["tcndbputcat",""],["tcndbputcat2",""],["tcndbputcat3",""],["tcndbputkeep",""],["tcndbputkeep2",""],["tcndbputkeep3",""],["tcndbputproc",""],["tcndbrnum",""],["tcndbvanish",""],["tcndbvsiz",""],["tcndbvsiz2",""],["tcnumtostrbin",""],["tcpackdecode",""],["tcpackencode",""],["tcpagealign",""],["tcpagsize","Get page size"],["tcpathlock",""],["tcpathunlock",""],["tcptrlistclear",""],["tcptrlistdel",""],["tcptrlistdup",""],["tcptrlistinsert",""],["tcptrlistnew",""],["tcptrlistnew2",""],["tcptrlistnum",""],["tcptrlistover",""],["tcptrlistpop",""],["tcptrlistpush",""],["tcptrlistremove",""],["tcptrlistshift",""],["tcptrlistunshift",""],["tcptrlistval",""],["tcquotedecode",""],["tcquoteencode",""],["tcread",""],["tcreaddir",""],["tcreadfile",""],["tcreadfilelines",""],["tcrealloc",""],["tcrealpath",""],["tcregexmatch",""],["tcregexreplace",""],["tcremovelink",""],["tcrenamefile","Rename the specified file"],["tcsleep",""],["tcsprintf",""],["tcstatfile",""],["tcstrbwm",""],["tcstrcntutf",""],["tcstrcututf",""],["tcstrdist",""],["tcstrdistutf",""],["tcstrdup",""],["tcstrfwm",""],["tcstribwm",""],["tcstricmp",""],["tcstrifwm",""],["tcstrisintnum",""],["tcstrisnum",""],["tcstrjoin",""],["tcstrjoin2",""],["tcstrjoin3",""],["tcstrjoin4",""],["tcstrkwic",""],["tcstrmktime",""],["tcstrskipspc",""],["tcstrsplit",""],["tcstrsplit2",""],["tcstrsplit3",""],["tcstrsplit4",""],["tcstrsqzspc",""],["tcstrsubchr",""],["tcstrtokenize",""],["tcstrtolower",""],["tcstrtoupper",""],["tcstrtrim",""],["tcstrucsnorm",""],["tcstrucstoutf",""],["tcstrutfnorm",""],["tcstrutftoucs",""],["tcsysinfo",""],["tcsystem",""],["tctime",""],["tctmplconf",""],["tctmpldel",""],["tctmpldump",""],["tctmplload",""],["tctmplload2",""],["tctmplnew",""],["tctmplsetsep",""],["tctopsort",""],["tctreeadddouble",""],["tctreeaddint",""],["tctreeclear",""],["tctreecutfringe",""],["tctreedel",""],["tctreedump",""],["tctreedup",""],["tctreeget",""],["tctreeget2",""],["tctreeget3",""],["tctreeget4",""],["tctreeiterinit",""],["tctreeiterinit2",""],["tctreeiterinit3",""],["tctreeiternext",""],["tctreeiternext2",""],["tctreeiterval",""],["tctreeiterval2",""],["tctreekeys",""],["tctreekeys2",""],["tctreeload",""],["tctreeloadone",""],["tctreemsiz",""],["tctreenew",""],["tctreenew2",""],["tctreeout",""],["tctreeout2",""],["tctreeprintf",""],["tctreeput",""],["tctreeput2",""],["tctreeput3","ordered tree (for experts)"],["tctreeputcat",""],["tctreeputcat2",""],["tctreeputcat3",""],["tctreeputkeep",""],["tctreeputkeep2",""],["tctreeputkeep3",""],["tctreeputproc",""],["tctreernum",""],["tctreevals",""],["tctreevals2",""],["tcunlinkfile","Unlink (delete) the specified file @param path Path of file @return true of success"],["tcunlock",""],["tcurlbreak",""],["tcurldecode",""],["tcurlencode","encoding utilities"],["tcurlresolve",""],["tcutf8map",""],["tcwrite",""],["tcwritefile",""],["tcwwwformdecode",""],["tcwwwformdecode2",""],["tcwwwformencode","encoding utilities (for experts)"],["tcxmlattrs",""],["tcxmlbreak",""],["tcxmlescape",""],["tcxmlunescape",""],["tcxstrcat",""],["tcxstrcat2",""],["tcxstrclear",""],["tcxstrdel",""],["tcxstrdup",""],["tcxstrfrommalloc",""],["tcxstrnew",""],["tcxstrnew2",""],["tcxstrnew3",""],["tcxstrprintf",""],["tcxstrptr",""],["tcxstrsize",""],["tcxstrtomalloc","extensible string (for experts)"],["tczeromap",""],["tczerounmap",""],["tempnam",""],["tgamma",""],["tgammaf",""],["tgammal",""],["time",""],["timegm",""],["timelocal",""],["timer_create",""],["timer_delete",""],["timer_getoverrun",""],["timer_gettime",""],["timer_settime",""],["timespec_get",""],["tmpfile",""],["tmpnam",""],["tmpnam_r",""],["trunc",""],["truncf",""],["truncl",""],["tzset",""],["ungetc",""],["unsetenv",""],["valloc",""],["vdprintf",""],["vfprintf",""],["vfscanf",""],["vfscanf1",""],["vprintf",""],["vscanf",""],["vscanf1",""],["vsnprintf",""],["vsprintf",""],["vsscanf",""],["vsscanf1",""],["wcstombs",""],["wctomb",""],["y0",""],["y0f",""],["y0l",""],["y1",""],["y1f",""],["y1l",""],["yn",""],["ynf",""],["ynl",""]],"static":[["_IO_2_1_stderr_",""],["_IO_2_1_stdin_",""],["_IO_2_1_stdout_",""],["_LIB_VERSION",""],["__daylight",""],["__timezone",""],["__tzname",""],["daylight",""],["signgam",""],["stderr",""],["stdin",""],["stdout",""],["sys_errlist",""],["sys_nerr",""],["tcfatalfunc",""],["timezone",""],["tzname",""]],"struct":[["BSONSTRIPCTX",""],["EJCOLL",""],["EJCOLLOPTS",""],["EJDB",""],["EJQ",""],["FFPCTX",""],["TCBITSTRM","bit operation utilities"],["TCCHIDX",""],["TCCHIDXNODE",""],["TCLIST",""],["TCLISTDATUM","array list"],["TCMAP",""],["TCMDB","on-memory hash database"],["TCMPELEM","memory pool"],["TCMPOOL",""],["TCNDB","on-memory tree database"],["TCPTRLIST","pointer list"],["TCTMPL","template serializer"],["TCTREE",""],["TCXSTR","extensible string"],["_G_fpos64_t",""],["_G_fpos_t",""],["_IO_FILE",""],["_IO_FILE_plus",""],["_IO_jump_t",""],["_IO_marker",""],["_TCMAPREC",""],["_TCTREEREC","ordered tree"],["__BindgenBitfieldUnit",""],["__fsid_t",""],["__locale_data",""],["__locale_struct",""],["__mbstate_t",""],["__pthread_internal_list",""],["__sigset_t",""],["__va_list_tag",""],["bson",""],["bson_iterator",""],["bson_timestamp_t",""],["div_t",""],["drand48_data",""],["exception",""],["fd_set",""],["itimerspec",""],["ldiv_t",""],["lldiv_t",""],["pthread_cond_t__bindgen_ty_1",""],["pthread_mutex_t___pthread_mutex_s",""],["pthread_rwlock_t__bindgen_ty_1",""],["random_data",""],["sigevent",""],["timespec",""],["timeval",""],["tm",""],["wait__bindgen_ty_1",""],["wait__bindgen_ty_2",""]],"type":[["BSONVISITOR",""],["EJQRESULT",""],["FILE",""],["HANDLE",""],["TCBITMAP",""],["TCCMP","basic utilities (for experts)"],["TCCODEC",""],["TCITER",""],["TCMAPREC",""],["TCPDPROC",""],["TCTREEREC",""],["_IO_lock_t",""],["_LIB_VERSION_TYPE",""],["__FILE",""],["__blkcnt64_t",""],["__blkcnt_t",""],["__blksize_t",""],["__builtin_va_list",""],["__caddr_t",""],["__clock_t",""],["__clockid_t",""],["__codecvt_result",""],["__compar_fn_t",""],["__daddr_t",""],["__dev_t",""],["__fd_mask",""],["__fsblkcnt64_t",""],["__fsblkcnt_t",""],["__fsfilcnt64_t",""],["__fsfilcnt_t",""],["__fsword_t",""],["__gid_t",""],["__gnuc_va_list",""],["__id_t",""],["__ino64_t",""],["__ino_t",""],["__int16_t",""],["__int32_t",""],["__int64_t",""],["__int8_t",""],["__intptr_t",""],["__io_close_fn",""],["__io_read_fn",""],["__io_seek_fn",""],["__io_write_fn",""],["__key_t",""],["__locale_t",""],["__loff_t",""],["__mode_t",""],["__nlink_t",""],["__off64_t",""],["__off_t",""],["__pid_t",""],["__pthread_list_t",""],["__qaddr_t",""],["__quad_t",""],["__rlim64_t",""],["__rlim_t",""],["__sig_atomic_t",""],["__socklen_t",""],["__ssize_t",""],["__suseconds_t",""],["__syscall_slong_t",""],["__syscall_ulong_t",""],["__time_t",""],["__timer_t",""],["__u_char",""],["__u_int",""],["__u_long",""],["__u_quad_t",""],["__u_short",""],["__uid_t",""],["__uint16_t",""],["__uint32_t",""],["__uint64_t",""],["__uint8_t",""],["__useconds_t",""],["_bindgen_ty_1",""],["_bindgen_ty_10",""],["_bindgen_ty_11","Export/Import settings used in `ejdbexport()` and `ejdbimport()` functions."],["_bindgen_ty_2","miscellaneous utilities (for experts)"],["_bindgen_ty_3",""],["_bindgen_ty_4",""],["_bindgen_ty_5",""],["_bindgen_ty_6",""],["_bindgen_ty_7",""],["_bindgen_ty_8",""],["_bindgen_ty_9",""],["blkcnt_t",""],["blksize_t",""],["bson_binary_subtype_t",""],["bson_bool_t",""],["bson_date_t",""],["bson_err_handler",""],["bson_error_t",""],["bson_flags_t",""],["bson_merge_array_mode",""],["bson_printf_func",""],["bson_traverse_flags_t","BSON object visitor @param it bson iterator to traverse @param visitor Visitor function @param op Opaque data for visitor"],["bson_type",""],["bson_validity_t",""],["bson_visitor_cmd_t",""],["caddr_t",""],["clock_t",""],["clockid_t",""],["daddr_t",""],["dev_t",""],["double_t",""],["fd_mask",""],["float_t",""],["fpos_t",""],["fsblkcnt_t",""],["fsfilcnt_t",""],["fsid_t",""],["gid_t",""],["id_t",""],["idtype_t",""],["ino_t",""],["int_fast16_t",""],["int_fast32_t",""],["int_fast64_t",""],["int_fast8_t",""],["int_least16_t",""],["int_least32_t",""],["int_least64_t",""],["int_least8_t",""],["intmax_t",""],["key_t",""],["locale_t",""],["loff_t",""],["mode_t",""],["nlink_t",""],["off_t",""],["pid_t",""],["pthread_key_t",""],["pthread_once_t",""],["pthread_spinlock_t",""],["pthread_t",""],["quad_t",""],["register_t",""],["sigset_t",""],["suseconds_t",""],["time_t",""],["timer_t",""],["u_char",""],["u_int",""],["u_int16_t",""],["u_int32_t",""],["u_int64_t",""],["u_int8_t",""],["u_long",""],["u_quad_t",""],["u_short",""],["uid_t",""],["uint",""],["uint_fast16_t",""],["uint_fast32_t",""],["uint_fast64_t",""],["uint_fast8_t",""],["uint_least16_t",""],["uint_least32_t",""],["uint_least64_t",""],["uint_least8_t",""],["uintmax_t",""],["ulong",""],["ushort",""],["va_list",""],["wchar_t",""]],"union":[["__WAIT_STATUS",""],["__mbstate_t__bindgen_ty_1",""],["bson_oid_t",""],["pthread_attr_t",""],["pthread_barrier_t",""],["pthread_barrierattr_t",""],["pthread_cond_t",""],["pthread_condattr_t",""],["pthread_mutex_t",""],["pthread_mutexattr_t",""],["pthread_rwlock_t",""],["pthread_rwlockattr_t",""],["tcgeneric_t",""],["wait",""]]});